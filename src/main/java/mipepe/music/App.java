/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package mipepe.music;

import javax.sound.sampled.*;
import java.nio.ByteBuffer;
import javax.swing.*;
import java.util.ArrayList;
import java.lang.Math;
import java.util.Random;

public class App {

    public static int sampleRate = 48000;
    public static double c = 0;
    public static double a = 1.0/8.0;
    public static SourceDataLine line;
    public static double[] waveForm;
    public static double d;
    public static double f;
    public static ArrayList<MyDouble> wave = new ArrayList<MyDouble>();

    public static int size = 64;
    public static int width = size*2;
    public static int height = size;
    public static int cellSize = 10;
    public static int baseModulus = 64;
    public static int modulus = baseModulus;
    public static Random random = new Random();
    public static int tickModulusModulus = 64;
    public static boolean grey = false;
    public static Canvas canvas;
    public static int iterationTime = 128;
    public static Automaton automaton;
    public static void reset() {
        automaton.reset();
    }
    public static void loop3() {
        loop1();
        loop2();

        double c2 = c;
        loop1();
        loop2();
        c = c2;
        double f2 = f;
        f /= 3.0/2.0;
        loop1();
        loop2();
        f = f2;

        c2 = c;
        loop1();
        loop2();
        c = c2;
        f2 = f;
        f /= 4.0/3.0;
        loop1();
        loop2();
        f = f2;

        c2 = c;
        loop1();
        loop2();
        c = c2;
        f2 = f;
        f /= 5.0/4.0;
        loop1();
        loop2();
        f = f2;

        loop4();
        loop4();
        loop4();
        loop4();
    }
    
    public static void loop1() {
        put(f,d/2);
        c+=d;
        put(f,d/2);
        c+=d;
        put(f,d/2);
        c+=d;
        put(f,d/2);
        c+=d;
    }
    public static void loop2() {
        put(f,d/2);
        c+=d/2;
        put(f*5/4,d/2);
        c+=d/2;
        put(f*5/4*4/3,d/2);
        c+=d/2;
        put(f*5/4*4/3*3/2,d/2);
        c+=d/2;
        put(f,d/2);
        c+=d/2;
        put(f*5/4,d/2);
        c+=d/2;
        put(f*5/4*4/3,d/2);
        c+=d/2;
        put(f*5/4*4/3*3/2,d/2);
        c+=d/2;
    }
    public static void loop4() {
        put(f*2/1,d/2);
        c+=d/2;
        put(f*3/2,d/2);
        c+=d/2;
        put(f*4/3,d/2);
        c+=d/2;
        put(f*5/4,d/2);
        c+=d/2;

        put(f*2/1,d/4);
        c+=d/4;
        put(f*3/2,d/4);
        c+=d/4;
        put(f*4/3,d/4);
        c+=d/4;
        put(f*5/4,d/4);
        c+=d/4;
        put(f*2/1,d/4);
        c+=d/4;
        put(f*3/2,d/4);
        c+=d/4;
        put(f*4/3,d/4);
        c+=d/4;
        put(f*5/4,d/4);
        c+=d/4;

        
    }
    public static void main(String[] args) {
        JFrame frame = new JFrame("Music");
        frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        canvas = new Canvas();
        automaton = new Automaton();
        frame.add(canvas);
        frame.pack();
        frame.setLocationRelativeTo(null);
        frame.setResizable(false);
        frame.setVisible(true);
        canvas.fillColors();
        AudioFormat audioFormat = new AudioFormat(AudioFormat.Encoding.PCM_SIGNED, sampleRate, 16, 1, 2, sampleRate, true);
        line = null;
        DataLine.Info info = new DataLine.Info(SourceDataLine.class, audioFormat); 
        if (!AudioSystem.isLineSupported(info)) {
            System.out.println("ERROR: !AudioSystem.isLineSupported(info)");
            System.exit(0);
        }
        try {
            line = (SourceDataLine) AudioSystem.getLine(info);
            line.open(audioFormat);
        } catch (LineUnavailableException exception) {
            exception.printStackTrace();
            System.out.println("ERROR: LineUnavailableException exception");
            System.exit(0);
        }
        waveForm = new double[2];
        waveForm[0] = 1;
        waveForm[1] = 0;
        automaton.iterate();
        App.canvas.drawAutomaton();            
        //generateWaveForm();
        //printWaveForm();
        d = 0.333;
        f = 220;
        /*put(f,d);
        c += d;
        put(f,d);
        c += d;
        */
        loop3();
        applyEcho();
        AudioThread audioThread = new AudioThread();
        audioThread.start();
        
    }

    public static double normalize(int row, int column) {
        int level = automaton.cells[row][column].level;
        //System.out.println(level);
        double n = (double) level / ((double) (modulus-1)) * 2.0 - 1.0;
        return n;
    }

    public static void printWaveForm() {
        for(int i =0; i < waveForm.length; i++) {
            System.out.println(waveForm[i]);
        }
    }

    public static void applyEcho() {
        c = 0.0;
        int echoes = 2;
        double echoTime = 1.0/3.0;
        ArrayList<ArrayList<MyDouble>> waves = new ArrayList<ArrayList<MyDouble>>(echoes);
        double scalar = 1.0*1.0/2.0;
        for(int i = 0; i < echoes; i++) {
            waves.add(multiply(wave, scalar));
            scalar *= 1.0/2.0;
        }
        for(int i = 0; i < echoes; i++) {
            c += echoTime;
            wave = addWaves(wave, waves.get(i));
            echoTime *= 2.0/3.0;
        }
        c = 0.0;
    }

    public static ArrayList<MyDouble> multiply(ArrayList<MyDouble> wave, double scalar) {
        ArrayList<MyDouble> multiplied = new ArrayList<MyDouble>(wave.size());
        for (int i = 0; i < wave.size(); i++) {
            multiplied.add(new MyDouble(wave.get(i).value*scalar));
        }
        return multiplied;
    }

    public static void generateWaveForm() {
        waveForm = new double[width*height];
        int index = 0;
        for (int row = 0; row < height; row++) {
            for (int column = 0; column < width; column++) {
                waveForm[index] = normalize(row, column);
                index++;
            }
        }
    }

    public static void put(double frequency, double time) {
        ArrayList<MyDouble> newWave = writeWave(waveForm, frequency, time);
        wave = addWaves(wave, newWave);
    }
    
    public static ArrayList<MyDouble> addWaves(ArrayList<MyDouble> waveA, ArrayList<MyDouble> waveB) {
        int index = (int)Math.ceil(c*sampleRate);
        int resultLength = Math.max(index+waveB.size(), waveA.size());
        ArrayList<MyDouble> result = new ArrayList<MyDouble>(resultLength);
        for (int i = 0; i < resultLength; i++) {
            result.add(new MyDouble(0));
        }
        int i = 0;
        for(MyDouble sample : waveA) {
            result.get(i).value += sample.value;
            i++;
        }
        i = index;
        for(MyDouble sample : waveB) {
            result.get(i).value += sample.value;
            i++;
        }
        return result;
    } 

    public static ArrayList<MyDouble> writeSilence(double time) {
        double totalSamplesReal = time*sampleRate;
        int totalSamples = (int)Math.ceil(totalSamplesReal);
        ArrayList<MyDouble> samples = new ArrayList<MyDouble>(totalSamples);
        for (int i = 0; i < totalSamples; i++) {
            samples.add(new MyDouble(0));
        }
        return samples;
    }
    public static ArrayList<MyDouble> writeWave(double[] waveForm, double frequency, double time) {
        double length = (double)sampleRate / (double)waveForm.length / frequency;
        int repetitions = (int) Math.ceil(time*(double)sampleRate/(double)waveForm.length/length);
        return writeWaveRaw(waveForm, length, repetitions);
    }

    public static void printWave(ArrayList<MyDouble> wave) {
        for(MyDouble sample : wave) {
            System.out.println(sample.value);
        }
    }

    public static void printSamples(ArrayList<MyShort> samples) {
        for(MyShort sample : samples) {
            System.out.println(sample.value);
        }
    }

    public static void printBytes(byte[] bytes) {
        for(byte b : bytes) {
            System.out.println(b);
        }
    }

    public static byte[] toBytes(ArrayList<MyShort> samples) {
        int size = samples.size()*2;
        ByteBuffer buffer = ByteBuffer.allocate(size);
        for(MyShort sample : samples) {
            buffer.putShort(sample.value);
        }
        byte[] bytes = new byte[size];
        for (int i = 0; i < size; i++) {
            bytes[i] = buffer.get(i);
        }
        return bytes;
    }

    public static short toFormatSample(double sample) {
        return (short)(sample*a*32000);
    }

    public static ArrayList<MyShort> waveToSamples(ArrayList<MyDouble> wave) {
        ArrayList<MyShort> samples = new ArrayList<MyShort>();
        for (MyDouble doubleSample : wave) {
            samples.add(new MyShort(toFormatSample(doubleSample.value)));
        }
        return samples;
    }

    public static ArrayList<MyDouble> writeWaveRaw(double[] waveForm, double length, int repetitions) {
        
        double totalSamplesReal = waveForm.length*length*repetitions;
        int totalSamples = (int)Math.ceil(totalSamplesReal);
        ArrayList<MyDouble> sampleList = new ArrayList<MyDouble>(totalSamples);
        ArrayList<ArrayList<MyDouble>> preSampleList = new ArrayList<ArrayList<MyDouble>>(totalSamples);
        for (int i = 0; i < totalSamples; i++) {
            sampleList.add(new MyDouble(0));
            preSampleList.add(new ArrayList<MyDouble>());
        }
        double pointer = 0;
        double step = length;
        double waveLength = waveForm.length*length;
        for (int repetition = 0; repetition < repetitions; repetition++) {
            for (int waveFormIndex = 0; waveFormIndex < waveForm.length; waveFormIndex++) {
                for (double sampleIndex = pointer; sampleIndex < pointer+step; sampleIndex++) {
                    preSampleList.get((int)sampleIndex).add(new MyDouble(waveForm[waveFormIndex]));
                }
                pointer+=step;
            }
        }
        for (int sampleIndex = 0; sampleIndex < totalSamples; sampleIndex++) {
            for (MyDouble sampleBit : preSampleList.get(sampleIndex)) {
                sampleList.get(sampleIndex).value += sampleBit.value;

            }
            sampleList.get(sampleIndex).value /= preSampleList.get(sampleIndex).size();
        }
        return sampleList;
    }
    

}
